{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","reportWebVitals.js","index.js"],"names":["Pokecard","number","imgSrc","this","props","id","slice","h","v","r","dur","int","max","fixed","fixedStop","freez","trigger","isBattling","className","name","winner","src","alt","type","base_experience","Component","Pokedex","title","isWinner","console","log","battling","exp","pokemon","map","p","Pokegame","state","exp1","exp2","hand1","hand2","randomize","bind","setState","length","randomIdx","Math","floor","random","randPokemon","splice","push","setTimeout","reduce","class","onClick","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2f4a192.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Pokecard.css\";\nimport { Shake } from \"reshake\";\n// const POKE_API =\n//   \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\";\nconst POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\n\nclass Pokecard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\n    return (\n      <Shake\n        h={87}\n        v={5}\n        r={0}\n        dur={110}\n        int={3.3}\n        max={100}\n        fixed={false}\n        fixedStop={false}\n        freez={false}\n        trigger={this.props.isBattling ? false : true}\n      >\n        <div className=\"Pokecard\">\n          <h2 className=\"Pokecard-name\">{this.props.name}</h2>\n          <h2 className=\"Pokecard-status\">\n            {\" \"}\n            {this.props.winner ? \"Winner! :)\" : \"Loser :(\"}\n          </h2>\n          <div\n            className={this.props.winner ? \"winningImgClass\" : \"losingImgClass\"}\n          >\n            <img src={imgSrc} alt={this.props.name} />\n          </div>\n          <div className=\"Pokecard-data\">Poketype: {this.props.type}</div>\n          <div className=\"Pokecard-data\">exp: {this.props.base_experience}</div>\n        </div>\n      </Shake>\n    );\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from \"react\";\n// Below, we import the <Pokecard /> component so we can render a bunch of little <Pokecard /> components\n// containing unique information. This unique information has been passed down as props by the above <Pokedex /> component\nimport Pokecard from \"./Pokecard\";\nimport \"./Pokedex.css\";\n\nclass Pokedex extends Component {\n  render() {\n    let title;\n    if (this.props.isWinner) {\n      title = <h1 className=\"winningClass\">Winner!!</h1>;\n    } else {\n      title = <h1 className=\"losingClass\">Loser!!</h1>;\n    }\n    console.log(this.props.battling);\n    return (\n      <div className=\"Pokedex\">\n        <h1>{title}</h1>\n        {/* below we show the total EXP, calculated by a reducer function in the </Pokedex /> component above */}\n        <h3 className={this.props.isWinner ? \"expBold\" : \"\"}>\n          Total Exp: <b>{this.props.exp}</b>\n        </h3>\n        <div className=\"Pokedex-cards\">\n          {this.props.pokemon.map((p) => (\n            <Pokecard\n              isBattling={this.props.battling}\n              id={p.id}\n              name={p.name}\n              type={p.type}\n              base_experience={p.base_experience}\n              winner={this.props.isWinner}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Pokedex;\n","import React, { Component } from \"react\";\n// have to import the Poke Deck below in order to render \"Pokedex\" components (<Pokedex />)\n// We then pass the props INSIDE <Pokedex /> down to the actual deck components below, where more logic runs\nimport Pokedex from \"./Pokedex\";\nimport \"./Pokegame.css\";\n\nclass Pokegame extends Component {\n  // Constructor method\n  constructor(props) {\n    super(props);\n    this.state = {\n      exp1: 0,\n      exp2: 0,\n      isBattling: false,\n      hand1: [],\n      hand2: [],\n    };\n    this.randomize = this.randomize.bind(this);\n  }\n\n  //   We put in some default Properties here to pass down to be rendered in the Pokedex component below\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n    ],\n  };\n  randomize() {\n    this.setState({ isBattling: true });\n    let hand1 = [];\n    let hand2 = [...this.props.pokemon];\n    // This logic looks at hand2, and while there are more pokemon in hand 2 than hand1, it splices/pushes one over to the other hand\n    while (hand2.length > hand1.length) {\n      let randomIdx = Math.floor(Math.random() * hand2.length);\n\n      let randPokemon = hand2.splice(randomIdx, 1)[0];\n      hand1.push(randPokemon);\n    }\n    setTimeout(() => {\n      this.setState({\n        exp1: hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0),\n        exp2: hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0),\n        hand1: hand1,\n        hand2: hand2,\n        isBattling: false,\n      });\n    }, 2000);\n  }\n\n  render() {\n    return (\n      <div className=\"Pokegame\">\n        <div class=\"Pokegame-container\">\n          <button className=\"randomizeButton\" onClick={this.randomize}>\n            {this.state.isBattling ? \"FIGHTING!!!\" : \"PREPARE FOR BATTLE\"}\n          </button>\n          <div className=\"Pokegame-cards\">\n            <Pokedex\n              battling={this.state.isBattling}\n              pokemon={this.state.hand1}\n              exp={this.state.exp1}\n              isWinner={this.state.exp1 > this.state.exp2}\n            />\n          </div>\n          <div className=\"Pokegame-cards\">\n            <Pokedex\n              battling={this.state.isBattling}\n              pokemon={this.state.hand2}\n              exp={this.state.exp2}\n              isWinner={this.state.exp2 > this.state.exp1}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pokegame;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Pokegame from \"./Pokegame\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Pokegame />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}